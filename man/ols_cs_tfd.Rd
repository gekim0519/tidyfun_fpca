% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ols_cs_tfd.R
\name{ols_cs_tfd}
\alias{ols_cs_tfd}
\title{Cross-sectional FoSR using GLS}
\usage{
ols_cs_tfd(formula, data = NULL, Kt = 5, basis = "bs",
  verbose = TRUE)
}
\arguments{
\item{formula}{a formula indicating the structure of the proposed model.}

\item{data}{an data frame, list or environment containing the
variables in the model. This includes the response variable of the formula which
should be a tfd class.}

\item{Kt}{number of spline basis functions used to estimate coefficient functions}

\item{basis}{basis type; options are "bs" for b-splines and "pbs" for periodic
b-splines}

\item{verbose}{logical defaulting to \code{TRUE} -- should updates on progress be printed?}
}
\description{
Fitting function for function-on-scalar regression for cross-sectional data.
Edited `refund::ols_cs`, while the inputs did not change, ols_cs_tfdâ€™s argument,
data will be a dataframe with a tfd type column, which will be the response
of the proposed model.This function estimates model parameters using GLS:
first, an OLS estimate of spline coefficients is estimated; second, the residual
covariance is estimated using an FPC decomposition of the OLS residual curves;
finally, a GLS estimate of spline coefficients is estimated. Although this is
in the `BayesFoSR` package, there is nothing Bayesian about this FoSR.
}
\examples{
\dontrun{
library(ggplot2)
library(reshape2)
data(dti)

dti.ols = ols_cs_tfd(cca ~ pasat, data = dti, Kt = 10)
gibbs_dti = gibbs_cs_fpca_tfd(cca ~ pasat, data = dti, Kt = 10, N.iter = 500, N.burn = 200)
gibbs_dti_wish = gibbs_dti_wish = gibbs_cs_wish_tfd(cca ~ pasat, data = dti, Kt = 10, N.iter = 500, N.burn = 200)
models = c("dti.ols", "gibbs_dti", "gibbs_dti_wish")
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])

## graph of estimated coefficient functions (intercept, slope)

plot.dat = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
  geom_path() + theme_bw() + ylab("intercept")

plot.dat = melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
  geom_path() + theme_bw() + ylab("slope")
}
}
\references{
Goldsmith, J., Kitago, T. (2016).
Assessing Systematic Effects of Stroke on Motor Control using Hierarchical
Function-on-Scalar Regression. \emph{Journal of the Royal Statistical Society:
Series C}, 65 215-236.
}
\author{
Gaeun Kim \email{gk2501@columbia.edu} and
Jeff Goldsmith \email{ajg2202@cumc.columbia.edu}
}
