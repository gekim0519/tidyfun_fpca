fit.mu = data.frame(mu = fit.cd4$mu,
n = 1:ncol(fit.cd4$Yhat))
fit.basis = data.frame(phi = fit.cd4$efunctions, #the FPC basis functions.
n = 1:ncol(fit.cd4$Yhat))
## plot estimated mean function
ggplot(fit.mu, aes(x = n, y = mu)) + geom_path()
Fit.MM = fpca.sc(cd4, var = TRUE, simul = TRUE)
Fit.mu = data.frame(mu = Fit.MM$mu,
d = as.numeric(colnames(cd4)))
Fit.basis = data.frame(phi = Fit.MM$efunctions, # d Ã— npc matrix of estimated eigenfunctions of the functional covariance, i.e., the FPC basis functions.
d = as.numeric(colnames(cd4)))
## for one subject, examine curve estimate, pointwise and simultaneous itervals
EX = 1
EX.MM = data.frame(fitted = Fit.MM$Yhat[EX,],
ptwise.UB = Fit.MM$Yhat[EX,] + 1.96 * sqrt(Fit.MM$diag.var[EX,]),
ptwise.LB = Fit.MM$Yhat[EX,] - 1.96 * sqrt(Fit.MM$diag.var[EX,]),
simul.UB = Fit.MM$Yhat[EX,] + Fit.MM$crit.val[EX] * sqrt(Fit.MM$diag.var[EX,]),
simul.LB = Fit.MM$Yhat[EX,] - Fit.MM$crit.val[EX] * sqrt(Fit.MM$diag.var[EX,]),
d = as.numeric(colnames(cd4)))
## plot data for one subject, with curve and interval estimates
EX.MM.m = melt(EX.MM, id = 'd')
ggplot(EX.MM.m, aes(x = d, y = value, group = variable, color = variable, linetype = variable)) +
geom_path() +
scale_linetype_manual(values = c(fitted = 1, ptwise.UB = 2,
ptwise.LB = 2, simul.UB = 3, simul.LB = 3)) +
scale_color_manual(values = c(fitted = 1, ptwise.UB = 2,
ptwise.LB = 2, simul.UB = 3, simul.LB = 3)) +
labs(x = 'Months since seroconversion', y = 'Total CD4 Cell Count')
## plot estimated mean function
ggplot(Fit.mu, aes(x = d, y = mu)) + geom_path() +
labs(x = 'Months since seroconversion', y = 'Total CD4 Cell Count')
## plot the first two estimated basis functions
Fit.basis.m = melt(Fit.basis, id = 'd')
ggplot(subset(Fit.basis.m, variable %in% c('phi.1', 'phi.2')), aes(x = d,
y = value, group = variable, color = variable)) + geom_path()
##### Cross-sectional real-data examples #####
## organize data
data(DTI)
#DTI = subset(DTI, select = c(cca, case, pasat))
#DTI = DTI[complete.cases(DTI),]
#DTI$gender = factor(sample(c("male","female"), dim(DTI)[1], replace = TRUE))
#DTI$status = factor(sample(c("RRMS", "SPMS", "PPMS"), dim(DTI)[1], replace = TRUE))
## fit models
default = bayes_fosr(cca ~ pasat, data = DTI)
VB = bayes_fosr(cca ~ pasat, data = DTI, Kp = 4, Kt = 10)
#Gibbs = bayes_fosr(cca ~ pasat, data = DTI, Kt = 10, est.method = "Gibbs", cov.method = #"Wishart", N.iter = 500, N.burn = 200)
OLS = bayes_fosr(cca ~ pasat, data = DTI, Kt = 10, est.method = "OLS")
GLS = bayes_fosr(cca ~ pasat, data = DTI, Kt = 10, est.method = "GLS")
## plot results
models = c("default", "VB", "OLS", "GLS")
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
plot.dat = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw()
plot.dat = melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw()
#Gibbs - Error in tx[, ind.cur] %*% siginv : non-conformable arguments
# removed Gibbs
dti.ols = ols_cs(cca ~ pasat, data = DTI, Kt = 10)
library(splines)
library(pbs)
source("../function/ols_cs_tfd.R")
dti["pasat"] = DTI$pasat
dti.ols.prac = ols_cs_tfd(cca ~ pasat, col = cca, data = dti, Kt = 10)
## plot results
plot_fit_models = function(m1 = NULL, m2 = NULL, m3 = NULL, m4 = NULL, m5 = NULL){
input = list(m1, m2, m3, m4, m5) %>%
enquo()
as.character(input)
}
toString(dti.ols)
plot_fit_models(dti.ols, dti.ols.prac)
ls = c(dti.ols, dti.ols.prac, NULL)
ls[vapply(ls, Negate(is.null), NA)]
models = c("dti.ols", "dti.ols.prac")
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
plot.dat = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw()
plot.dat = melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw()
all(dti %>%
pull(cca) %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix() == DTI$cca, na.rm = TRUE)
all(dti$pasat == DTI$pasat, na.rm = TRUE)
plot_fit_models = function(...) {
input = enquo(...)
print(input)
}
plot_fit_models(dti.ols, dti.testing.ols)
dti_testing = dti
dti_testing["cca"] = dti$cca %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix()
colnames(dti_testing$cca) = DTI$cca %>% colnames()
dti.testing.ols = ols_cs(cca ~ pasat, data = dti_testing, Kt = 10)
plot_fit_models = function(...) {
input = enquo(...)
print(input)
}
plot_fit_models(dti.ols, dti.testing.ols)
plot_fit_models = function(ls) {
models = ls
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
plot.dat = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw()
plot.dat = melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw()
}
plot_fit_models = function(models) {
models = models
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
plot.dat = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw()
plot.dat = melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw()
}
models = c("dti.ols", "dti.testing.ols")
plot_fit_models(dti.ols, dti.testing.ols)
plot_fit_models = function(models) {
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
plot.dat = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw()
plot.dat = melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw()
}
models = c("dti.ols", "dti.testing.ols")
plot_fit_models(models)
plot_fit_models = function(models) {
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
plot.int = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("intercepts")
plot.slop = melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("slopes")
grid.arrange(plot.int, plot.int, nrow = 1)
}
models = c("dti.ols", "dti.testing.ols")
plot_fit_models(models)
plot_fit_models = function(models) {
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
plot.int = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("intercepts")
plot.slop = melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("slopes")
multiplot(plot.int, plot.int, cols = 1)
}
models = c("dti.ols", "dti.testing.ols")
plot_fit_models(models)
install.packages("gridExtra")
plot_fit_models = function(models) {
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
plot.int = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("intercepts")
plot.slop = melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("slopes")
gridExtra::grid.arrange(plot.int, plot.int, nrow = 2)
}
models = c("dti.ols", "dti.testing.ols")
plot_fit_models(models)
plot_fit_models = function(models) {
models = models
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
plot.int = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("intercepts")
plot.slop = melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("slopes")
gridExtra::grid.arrange(plot.int, plot.int, nrow = 2)
}
models = c("dti.ols", "dti.testing.ols")
plot_fit_models(models)
plot_fit_models = function(models) {
models = models
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
plot.int = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("intercepts")
plot.slop = melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("slopes")
}
models = c("dti.ols", "dti.testing.ols")
plot_fit_models(models)
plot_fit_models = function(models) {
models = models
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
plot.int = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("intercepts")
plot.slop = melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("slopes")
gridExtra::grid.arrange(plot.int, plot.int, nrow = 2)
}
models = c("dti.ols", "dti.testing.ols")
plot_fit_models(models)
plot_fit_models = function(models) {
models = models
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
plot.int = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("intercepts")
plot.slop = melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("slopes")
gridExtra::grid.arrange(plot.int, plot.int)
}
models = c("dti.ols", "dti.testing.ols")
plot_fit_models(models)
plot_fit_models = function(models) {
models = models
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
par(mfrow=c(2,1))
plot.int = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("intercepts")
plot.slop = melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("slopes")
}
models = c("dti.ols", "dti.testing.ols")
plot_fit_models(models)
plot_fit_models = function(models) {
models = models
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
par(mfrow=c(2,1))
melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("intercepts")
melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("slopes")
}
models = c("dti.ols", "dti.testing.ols")
plot_fit_models(models)
plot_fit_models = function(models) {
models = models
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
par(mfrow=c(2,1))
plot.int = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("intercepts")
plot.slop = melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("slopes")
print(plot.int, plot.slop)
}
models = c("dti.ols", "dti.testing.ols")
plot_fit_models(models)
plot_fit_models = function(models) {
models = models
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
plot.int = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("intercepts")
plot.slop = melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("slopes")
return(plot.int, plot.slop)
}
models = c("dti.ols", "dti.testing.ols")
plot_fit_models(models)
plot_fit_models = function(models) {
models = models
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
plot.int = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("intercepts")
plot.slop = melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("slopes")
return(c(plot.int, plot.slop))
}
models = c("dti.ols", "dti.testing.ols")
plot_fit_models(models)
plot_fit_models = function(models) {
models = models
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
plot.dat = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
p1 = ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("intercepts")
plot.dat = melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
p2 = ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("slopes")
return(c(p1, p2))
}
models = c("dti.ols", "dti.testing.ols")
plot_fit_models(models)
plot_fit_models = function(models) {
models = models
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
plot.dat = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
p1 = ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("intercepts")
plot.dat = melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
p2 = ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("slopes")
p1
p2
}
models = c("dti.ols", "dti.testing.ols")
plot_fit_models(models)
plot_fit_models = function(models) {
models = models
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
plot.dat = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
p1 = ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("intercepts")
plot.dat = melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
p2 = ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("slopes")
print(p1, p2)
}
models = c("dti.ols", "dti.testing.ols")
plot_fit_models(models)
plot_fit_models = function(models) {
models = models
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
plot.dat = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
p1 = ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("intercepts")
plot.dat = melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
p2 = ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("slopes")
par(mfrow=c(2,1))
p1
p2
}
models = c("dti.ols", "dti.testing.ols")
plot_fit_models(models)
plot_fit_models = function(models) {
models = models
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
plot.dat = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
p1 = ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("intercepts")
plot.dat = melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
p2 = ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("slopes")
gridExtra::grid.arrange(p1,p2, row = 2)
}
models = c("dti.ols", "dti.testing.ols")
plot_fit_models(models)
plot_fit_models = function(models) {
models = models
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
plot.dat = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
p1 = ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("intercepts")
plot.dat = melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
p2 = ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("slopes")
gridExtra::grid.arrange(p1,p2)
}
models = c("dti.ols", "dti.testing.ols")
plot_fit_models(models)
dti_testing["cca"] = DTI$cca
dti.testing.ols = ols_cs(cca ~ pasat, data = dti_testing, Kt = 10)
plot_fit_models = function(models) {
models = models
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
plot.dat = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
p1 = ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("intercepts")
plot.dat = melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
p2 = ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("slopes")
gridExtra::grid.arrange(p1,p2)
}
models = c("dti.ols", "dti.testing.ols")
plot_fit_models(models)
colnames(dti_testing$cca) = DTI$cca %>% colnames()
rownames(dti_testing$cca) = DTI$cca %>% rownames()
dti.testing.ols = ols_cs(cca ~ pasat, data = dti_testing, Kt = 10)
models = c("dti.ols", "dti.testing.ols")
plot_fit_models(models)
dti_testing = dti
dti_testing["cca"] = dti$cca %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix()
colnames(dti_testing$cca) = DTI$cca %>% colnames()
dti.testing.ols = ols_cs(cca ~ pasat, data = dti_testing, Kt = 10)
dti.testing.ols = ols_cs(cca ~ pasat, data = dti_testing, Kt = 10)
plot_fit_models = function(models) {
models = models
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
plot.dat = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
p1 = ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("intercepts")
plot.dat = melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
p2 = ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("slopes")
gridExtra::grid.arrange(p1,p2)
}
models = c("dti.ols", "dti.testing.ols")
plot_fit_models(models)
dti_testing = dti
dti_testing["cca"] = dti$cca %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix()
colnames(dti_testing$cca) = DTI$cca %>% colnames()
rownames(dti_testing$cca) = DTI$cca %>% rownames()
dti.testing.ols = ols_cs(cca ~ pasat, data = dti_testing, Kt = 10)
plot_fit_models = function(models) {
models = models
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
plot.dat = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
p1 = ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("intercepts")
plot.dat = melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
p2 = ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw() + ggtitle("slopes")
gridExtra::grid.arrange(p1,p2)
}
models = c("dti.ols", "dti.testing.ols")
plot_fit_models(models)
dti_testing = dti
dti_testing["cca"] = dti$cca %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix()
colnames(dti_testing$cca) = DTI$cca %>% colnames()
rownames(dti_testing$cca) = DTI$cca %>% rownames()
dti.testing.ols = ols_cs(cca ~ pasat, data = dti_testing, Kt = 10)
models = c("dti.ols", "dti.testing.ols")
plot_fit_models(models)
dti_testing = dti
dti_testing["cca"] = dti$cca %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix()
colnames(dti_testing$cca) = DTI$cca %>% colnames()
rownames(dti_testing$cca) = DTI$cca %>% rownames()
dti.testing.ols = ols_cs(cca ~ pasat, data = dti_testing, Kt = 10)
models = c("dti.ols", "dti.testing.ols")
plot_fit_models(models)
dti_cca = dti_testing$cca
DTI_cca = DTI$cca
View(dti_cca)
View(DTI_cca)
dti_cca = dti_testing$cca %>%
tibble()
dti_cca = dti_testing$cca %>%
as.data.frame()
dti_testing$cca %>%
as.data.frame() %>%
filter(is.null() == TRUE)
dti_testing$cca %>%
as.data.frame() %>%
is.null()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyfun)
library(refund)
library(ggplot2)
library(reshape2)
library(mgcv)
source("../function/quadWeights.R")
source("../function/fpca.tfd.R")
Gibbs = bayes_fosr(cca ~ pasat, data = DTI, Kt = 10, est.method = "Gibbs", cov.method = "Wishart", N.iter = 500, N.burn = 200)
