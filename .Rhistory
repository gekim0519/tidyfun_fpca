diag(temp) = NA
row.vec = c(row.vec, rep(argvals[obs.points], each = length(obs.points)))
col.vec = c(col.vec, rep(argvals[obs.points], length(obs.points)))
G.0.vec = c(G.0.vec, as.vector(temp))
# still need G.O raw to calculate to get the raw to get the diagonal
cov.count[obs.points, obs.points] = cov.count[obs.points, obs.points] +
1
cov.sum[obs.points, obs.points] = cov.sum[obs.points, obs.points] + tcrossprod(Y.tilde[i,
obs.points])
}
row.vec.pred = rep(argvals, each = D)
col.vec.pred = rep(argvals, D)
npc.0 = matrix(predict(gam(G.0.vec ~ te(row.vec, col.vec, k = nbasis)), newdata = data.frame(row.vec = row.vec.pred,
col.vec = col.vec.pred)), D, D)
npc.0 = (npc.0 + t(npc.0))/2
G.0 = ifelse(cov.count == 0, NA, cov.sum/cov.count)
diag.G0 = diag(G.0)
}
if (makePD) {
npc.0 <- {
tmp <- Matrix::nearPD(npc.0, corr = FALSE, keepDiag = FALSE, do2eigen = TRUE,
trace = TRUE)
as.matrix(tmp$mat)
}
}
### numerical integration for calculation of eigenvalues (see Ramsay & Silverman,
### Chapter 8)
w <- quadWeights(argvals, method = integration)
Wsqrt <- diag(sqrt(w))
Winvsqrt <- diag(1/(sqrt(w)))
V <- Wsqrt %*% npc.0 %*% Wsqrt
evalues = eigen(V, symmetric = TRUE, only.values = TRUE)$values
###
evalues = replace(evalues, which(evalues <= 0), 0)
npc = ifelse(is.null(npc), min(which(cumsum(evalues)/sum(evalues) > pve)), npc)
efunctions = matrix(Winvsqrt %*% eigen(V, symmetric = TRUE)$vectors[, seq(len = npc)],
nrow = D, ncol = npc)
evalues = eigen(V, symmetric = TRUE, only.values = TRUE)$values[1:npc]  # use correct matrix for eigenvalue problem
cov.hat = efunctions %*% tcrossprod(diag(evalues, nrow = npc, ncol = npc), efunctions)
### numerical integration for estimation of sigma2
T.len <- argvals[D] - argvals[1]  # total interval length
T1.min <- min(which(argvals >= argvals[1] + 0.25 * T.len))  # left bound of narrower interval T1
T1.max <- max(which(argvals <= argvals[D] - 0.25 * T.len))  # right bound of narrower interval T1
DIAG = (diag.G0 - diag(cov.hat))[T1.min:T1.max]  # function values
w2 <- quadWeights(argvals[T1.min:T1.max], method = integration)
sigma2 <- max(weighted.mean(DIAG, w = w2, na.rm = TRUE), 0)
####
D.inv = diag(1/evalues, nrow = npc, ncol = npc)
Z = efunctions
Y.tilde = Y.pred - matrix(mu, I.pred, D, byrow = TRUE)
Yhat = matrix(0, nrow = I.pred, ncol = D)
rownames(Yhat) = rownames(Y.pred)
colnames(Yhat) = colnames(Y.pred)
scores = matrix(NA, nrow = I.pred, ncol = npc)
VarMats = vector("list", I.pred)
for (i in 1:I.pred) VarMats[[i]] = matrix(NA, nrow = D, ncol = D)
diag.var = matrix(NA, nrow = I.pred, ncol = D)
crit.val = rep(0, I.pred)
for (i.subj in 1:I.pred) {
obs.points = which(!is.na(Y.pred[i.subj, ]))
if (sigma2 == 0 & length(obs.points) < npc)
stop("Measurement error estimated to be zero and there are fewer observed points than PCs; scores cannot be estimated.")
Zcur = matrix(Z[obs.points, ], nrow = length(obs.points), ncol = dim(Z)[2])
ZtZ_sD.inv = solve(crossprod(Zcur) + sigma2 * D.inv)
scores[i.subj, ] = ZtZ_sD.inv %*% t(Zcur) %*% (Y.tilde[i.subj, obs.points])
Yhat[i.subj, ] = t(as.matrix(mu)) + scores[i.subj, ] %*% t(efunctions)
if (var) {
VarMats[[i.subj]] = sigma2 * Z %*% ZtZ_sD.inv %*% t(Z)
diag.var[i.subj, ] = diag(VarMats[[i.subj]])
if (simul & sigma2 != 0) {
norm.samp = mvrnorm(2500, mu = rep(0, D), Sigma = VarMats[[i.subj]])/matrix(sqrt(diag(VarMats[[i.subj]])),
nrow = 2500, ncol = D, byrow = TRUE)
crit.val[i.subj] = quantile(apply(abs(norm.samp), 1, max), sim.alpha)
}
}
}
ret.objects = c("Yhat", "Y", "scores", "mu", "efunctions", "evalues", "npc",
"argvals")
if (var) {
ret.objects = c(ret.objects, "sigma2", "diag.var", "VarMats")
if (simul)
ret.objects = c(ret.objects, "crit.val")
}
ret = lapply(1:length(ret.objects), function(u) get(ret.objects[u]))
names(ret) = ret.objects
class(ret) = "fpca"
return(ret)
}
fpca.tdf(tfb = dti$cca)
??gam()
install.packages("mgcv")
install.packages("mgcv")
install.packages("mgcv")
install.packages("mgcv")
install.packages("mgcv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyfun)
library(tidyverse)
library(ggplot2)
?mgcv::gam()
library(mgcv)
library(mgcv)
fpca.tdf(tfb = dti$cca)
library(mgcv)
library(refund)
fpca.tdf(tfb = dti$cca)
refund::quadWeights()
?refund::quadWeights()
fpca.tdf(tfb = dti$cca)
?refund::quadWeights()
fpca.tdf(tfb = dti$cca)
View(handwrit)
View(cwtemp)
CanadianWeather[[1]] %>% as.tibble() %>%
t() %>% as.matrix() %>%
.[1:35,]
CanadianWeather[[1]]
handwrit %>%
as.matrix()
View(dti)
View(handwrit_time)
View(handwrit)
hw_mat = handwrit %>%
as.matrix()
hw_x = handwrit %>%
as.matrix() %>%
.[,1:20]
View(hw_x)
hw_y = handwrit %>%
as.matrix() %>%
.[,-20]
View(hw_y)
hw_y = handwrit %>%
as.matrix() %>%
.[,-20]
hw_y = handwrit %>%
as.matrix() %>%
.[,-1:20]
hw_y = handwrit %>%
as.matrix() %>%
.[,21:40]
with(temp_df,
data.frame(place = place))
with(temp_df,
data.frame(place = place)) %>% as.tbl
with(temp_df,
data.frame(place = place)) %>% as.tbl %>%
mutate(temp = tfd(temp_df$temp))
hw_x = handwrit %>%
as.matrix() %>%
.[,1:20]
hw_y = handwrit %>%
as.matrix() %>%
.[,21:40]
handw_tdf = data.frame(id = 1:20) %>%
as.tbl %>%
mutate(x = tfd(hw_x),
y = tfd(hw_y))
hw_y = handwrit %>%
as.matrix() %>%
.[,21:40] %>%
t()
hw_x = handwrit %>%
as.matrix() %>%
.[,1:20] %>%
t()
hw_y = handwrit %>%
as.matrix() %>%
.[,21:40] %>%
t()
handw_tdf = data.frame(id = 1:20) %>%
as.tbl %>%
mutate(x = tfd(hw_x),
y = tfd(hw_y))
handw_tdf
View(handw_tdf)
handw_tdf %>%
filter(id == 1) %>%
ggplot(aes(x = x, y = y)) +
geom_spaghetti()
handw_tdf %>%
filter(id == 1)
handw_tdf %>%
filter(id == 1) %>%
ggplot(aes(x = x, y = y))
View(CanadianWeather)
View(cwtemp)
View(temp_tdf)
handw_tdf %>%
filter(id == 1) %>%
ggplot(aes(y = y)) +
geom_spaghetti()
handw_tdf %>%
filter(id == 1) %>%
ggplot(aes(x = x, y = y)) +
geom_spaghetti()
handw_tdf %>%
filter(id == 1)
handw_tdf$x
View(hw_x)
handw_tdf = data.frame(id = 1:20) %>%
as.tbl %>%
mutate(x = tfb(hw_x),
y = tfb(hw_y))
tfd(hw_x
tfd(hw_x)
tfd(hw_x)
handw_tdf$x
handw_tdf %>%
filter(id == 1) %>%
ggplot(aes(x = x, y = y)) +
geom_spaghetti()
handw_tdf = data.frame(id = 1:20) %>%
as.tbl %>%
mutate(x = tfd(hw_x),
y = tfd(hw_y))
handw_tdf %>%
filter(id == 1) %>%
ggplot(aes(x = x, y = y)) +
geom_spaghetti()
handw_tdf$x
hw_x
as_tibble(iris) %>% nest(-Species)
dti$cca
View(DTI)
DTI$cca
dti$cca
DTI$cca
DTI$cca
dti$cca
DTI$cca[1,]
tdf(DTI$cca[1,])
tfd(DTI$cca[1,])
?tfd()
seq(0,1, l = 93)
tfd(hw_x[1,], hw_y[1,]
tfd(hw_x[1,], hw_y[1,])
tfd(hw_x[1,], hw_y[1,])
tfd(hw_x[1,], hw_y[1,])
tfd(arg = seq(0,1,l = 93)
tfd(DTI$cca, seq(0,1, l = 93), signif = 2)
tfd(DTI$cca, seq(0,1, l = 93), signif = 2)
tfd(DTI$cca, seq(0,1, l = 93))
tfd(DTI$cca, seq(0,1, l = 93), signif = 2)
tfd(DTI$cca, seq(0,1, l = 93), signif = 2) %>%
tfd(arg = seq(0,1,l = 93))
tfd(DTI$cca, seq(0,1, l = 93), signif = 2)
tfd(DTI$cca, seq(0,1, l = 93), signif = 2) %>%
tfd(arg = seq(0,1,l = 93))
tfd(DTI$cca, seq(0,1, l = 93), signif = 2)
tfd(DTI$cca, seq(0,1, l = 93), signif = 2) %>%
tfd(arg = seq(0,1,l = 93))
hw_y[1,]
seq(0,1, l = 93
seq(0,1, l = 93)
seq(0,1, l = 93)
hw_y[1,]
hw_x[1,]
tfd(hw_x[1,], hw_y[1,])
seq(0,1, l = 93)
DTI$cca
len(DTI$cca)
str(DTI$cca)
hw_x[1,]
str(hw_x[1,])
str(hw_y[1,])
str(hw_x[1,])
str(hw_y[1,])
str(DTI$cca)
str(seq(0,1, l = 93))
str(hw_x[1,])
str(hw_x)
??tfd(str(hw_x), hw_y[1,])
tfd(str(hw_x), hw_y[1,])
tfd(str(hw_x), hw_y[1,])
tfd(hw_x, hw_y[1,])
unique(hw_y[1,])
unique(hw_y[1,]) %>%
length()
hw_y[1,] %>%
length()
tfd(hw_x[1,], hw_y[1,])
tfd(hw_x[1,], seq(0,1, l = length(hw_x[1,])))
dti$cca %>%
as.data.frame()
refund::quadweights
refund:::quadweights
refund:::quadWeights
source("./quadWeights.R")
handw_tdf %>%
filter(id == 1) %>%
ggplot(aes(y = y)) +
geom_spaghetti()
knitr::opts_chunk$set(echo = TRUE)
library(refund)
library(ggplot2)
library(reshape2)
library(mgcv)
source("./function/quadWeights.R")
source("./function/fpca.tfd.R")
?tdf
??tdf
??tfd
knitr::opts_chunk$set(echo = TRUE)
library(refund)
library(ggplot2)
library(reshape2)
library(mgcv)
source("./function/quadWeights.R")
source("./function/fpca.tfd.R")
temp_tfd = load("data/temp_tfd.RData")
handw_tfd= load("data/handw_tfd.RData")
DTI = refund::DTI
dti = with(refund::DTI,
data.frame(id = ID, sex = sex,
case = factor(ifelse(case, "MS", "control")))) %>% as.tbl %>%
mutate(cca = tfd(DTI$cca, seq(0,1, l = 93), signif = 2) %>%
tfd(arg = seq(0,1,l = 93)),
rcst = tfd(DTI$rcst, seq(0, 1, l = 55), signif = 3))
knitr::opts_chunk$set(echo = TRUE)
library(refund)
library(ggplot2)
library(reshape2)
library(mgcv)
source("./function/quadWeights.R")
source("./function/fpca.tfd.R")
temp_tfd = load("data/temp_tfd.RData")
handw_tfd= load("data/handw_tfd.RData")
DTI = refund::DTI
dti = with(refund::DTI,
data.frame(id = ID, sex = sex,
case = factor(ifelse(case, "MS", "control")))) %>% as.tbl %>%
mutate(cca = tfd(DTI$cca, seq(0,1, l = 93), signif = 2) %>%
tfd(arg = seq(0,1,l = 93)),
rcst = tfd(DTI$rcst, seq(0, 1, l = 55), signif = 3))
temp_tfd = load("data/temp_tfd.RData")
handw_tfd= load("data/handw_tfd.RData")
DTI = refund::DTI
dti = with(refund::DTI,
data.frame(id = ID, sex = sex,
case = factor(ifelse(case, "MS", "control")))) %>% as.tbl %>%
mutate(cca = tfd(DTI$cca, seq(0,1, l = 93), signif = 2) %>%
tfd(arg = seq(0,1,l = 93)),
rcst = tfd(DTI$rcst, seq(0, 1, l = 55), signif = 3))
library(tidyr)
temp_tfd = load("data/temp_tfd.RData")
handw_tfd= load("data/handw_tfd.RData")
DTI = refund::DTI
dti = with(refund::DTI,
data.frame(id = ID, sex = sex,
case = factor(ifelse(case, "MS", "control")))) %>% as.tbl %>%
mutate(cca = tfd(DTI$cca, seq(0,1, l = 93), signif = 2) %>%
tfd(arg = seq(0,1,l = 93)),
rcst = tfd(DTI$rcst, seq(0, 1, l = 55), signif = 3))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(refund)
library(ggplot2)
library(reshape2)
library(mgcv)
source("./function/quadWeights.R")
source("./function/fpca.tfd.R")
temp_tfd = load("data/temp_tfd.RData")
handw_tfd= load("data/handw_tfd.RData")
DTI = refund::DTI
dti = with(refund::DTI,
data.frame(id = ID, sex = sex,
case = factor(ifelse(case, "MS", "control")))) %>% as.tbl %>%
mutate(cca = tfd(DTI$cca, seq(0,1, l = 93), signif = 2) %>%
tfd(arg = seq(0,1,l = 93)),
rcst = tfd(DTI$rcst, seq(0, 1, l = 55), signif = 3))
library(tidyfun)
temp_tfd = load("data/temp_tfd.RData")
handw_tfd= load("data/handw_tfd.RData")
DTI = refund::DTI
dti = with(refund::DTI,
data.frame(id = ID, sex = sex,
case = factor(ifelse(case, "MS", "control")))) %>% as.tbl %>%
mutate(cca = tfd(DTI$cca, seq(0,1, l = 93), signif = 2) %>%
tfd(arg = seq(0,1,l = 93)),
rcst = tfd(DTI$rcst, seq(0, 1, l = 55), signif = 3))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyfun)
library(refund)
library(ggplot2)
library(reshape2)
library(mgcv)
source("./function/quadWeights.R")
source("./function/fpca.tfd.R")
temp_tfd = load("data/temp_tfd.RData")
handw_tfd= load("data/handw_tfd.RData")
DTI = refund::DTI
dti = with(refund::DTI,
data.frame(id = ID, sex = sex,
case = factor(ifelse(case, "MS", "control")))) %>% as.tbl %>%
mutate(cca = tfd(DTI$cca, seq(0,1, l = 93), signif = 2) %>%
tfd(arg = seq(0,1,l = 93)),
rcst = tfd(DTI$rcst, seq(0, 1, l = 55), signif = 3))
fit.cca = fpca.tfd(data = dti, col = rcst)
fit.mu = data.frame(mu = fit.cca$mu,
n = 1:ncol(fit.cca$Yhat))
fit.basis = data.frame(phi = fit.cca$efunctions, #the FPC basis functions.
n = 1:ncol(fit.cca$Yhat))
## plot estimated mean function
ggplot(fit.mu, aes(x = n, y = mu)) + geom_path()
## plot the first two estimated basis functions
fit.basis.m = melt(fit.basis, id = 'n')
ggplot(subset(fit.basis.m, variable %in% c('phi.1', 'phi.2')), aes(x = n,
y = value, group = variable, color = variable)) + geom_path()
data(cd4)
# CD4 cell counts for 366 subjects between months -18 and 42 since seroconversion. Each subject's observations are contained in a single row.
# subject * weeks
cd4_tfd = cd4 %>%
tfd()
cd4_df = data_frame(cd4_tfd, id = 1:366) %>%
select(cd4 = cd4_tfd, everything())
fit.cd4 = cd4_df %>%
fpca.tfd(data =., col = cd4)
fit.mu = data.frame(mu = fit.cd4$mu,
n = 1:ncol(fit.cd4$Yhat))
fit.basis = data.frame(phi = fit.cd4$efunctions, #the FPC basis functions.
n = 1:ncol(fit.cd4$Yhat))
## plot estimated mean function
ggplot(fit.mu, aes(x = n, y = mu)) + geom_path()
Fit.MM = fpca.sc(cd4, var = TRUE, simul = TRUE)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyfun)
library(refund)
library(ggplot2)
library(reshape2)
library(mgcv)
source("./function/quadWeights.R")
source("./function/fpca.tfd.R")
temp_tfd = load("data/temp_tfd.RData")
handw_tfd= load("data/handw_tfd.RData")
DTI = refund::DTI
dti = with(refund::DTI,
data.frame(id = ID, sex = sex,
case = factor(ifelse(case, "MS", "control")))) %>% as.tbl %>%
mutate(cca = tfd(DTI$cca, seq(0,1, l = 93), signif = 2) %>%
tfd(arg = seq(0,1,l = 93)),
rcst = tfd(DTI$rcst, seq(0, 1, l = 55), signif = 3))
fit.cca = fpca.tfd(data = dti, col = rcst)
fit.mu = data.frame(mu = fit.cca$mu,
n = 1:ncol(fit.cca$Yhat))
fit.basis = data.frame(phi = fit.cca$efunctions, #the FPC basis functions.
n = 1:ncol(fit.cca$Yhat))
## plot estimated mean function
ggplot(fit.mu, aes(x = n, y = mu)) + geom_path()
## plot the first two estimated basis functions
fit.basis.m = melt(fit.basis, id = 'n')
ggplot(subset(fit.basis.m, variable %in% c('phi.1', 'phi.2')), aes(x = n,
y = value, group = variable, color = variable)) + geom_path()
data(cd4)
# CD4 cell counts for 366 subjects between months -18 and 42 since seroconversion. Each subject's observations are contained in a single row.
# subject * weeks
cd4_tfd = cd4 %>%
tfd()
cd4_df = data_frame(cd4_tfd, id = 1:366) %>%
select(cd4 = cd4_tfd, everything())
fit.cd4 = cd4_df %>%
fpca.tfd(data =., col = cd4)
fit.mu = data.frame(mu = fit.cd4$mu,
n = 1:ncol(fit.cd4$Yhat))
fit.basis = data.frame(phi = fit.cd4$efunctions, #the FPC basis functions.
n = 1:ncol(fit.cd4$Yhat))
## plot estimated mean function
ggplot(fit.mu, aes(x = n, y = mu)) + geom_path()
Fit.MM = fpca.sc(cd4, var = TRUE, simul = TRUE)
Fit.mu = data.frame(mu = Fit.MM$mu,
d = as.numeric(colnames(cd4)))
Fit.basis = data.frame(phi = Fit.MM$efunctions, # d × npc matrix of estimated eigenfunctions of the functional covariance, i.e., the FPC basis functions.
d = as.numeric(colnames(cd4)))
## for one subject, examine curve estimate, pointwise and simultaneous itervals
EX = 1
EX.MM = data.frame(fitted = Fit.MM$Yhat[EX,],
ptwise.UB = Fit.MM$Yhat[EX,] + 1.96 * sqrt(Fit.MM$diag.var[EX,]),
ptwise.LB = Fit.MM$Yhat[EX,] - 1.96 * sqrt(Fit.MM$diag.var[EX,]),
simul.UB = Fit.MM$Yhat[EX,] + Fit.MM$crit.val[EX] * sqrt(Fit.MM$diag.var[EX,]),
simul.LB = Fit.MM$Yhat[EX,] - Fit.MM$crit.val[EX] * sqrt(Fit.MM$diag.var[EX,]),
d = as.numeric(colnames(cd4)))
## plot data for one subject, with curve and interval estimates
EX.MM.m = melt(EX.MM, id = 'd')
ggplot(EX.MM.m, aes(x = d, y = value, group = variable, color = variable, linetype = variable)) +
geom_path() +
scale_linetype_manual(values = c(fitted = 1, ptwise.UB = 2,
ptwise.LB = 2, simul.UB = 3, simul.LB = 3)) +
scale_color_manual(values = c(fitted = 1, ptwise.UB = 2,
ptwise.LB = 2, simul.UB = 3, simul.LB = 3)) +
labs(x = 'Months since seroconversion', y = 'Total CD4 Cell Count')
## plot estimated mean function
ggplot(Fit.mu, aes(x = d, y = mu)) + geom_path() +
labs(x = 'Months since seroconversion', y = 'Total CD4 Cell Count')
## plot the first two estimated basis functions
Fit.basis.m = melt(Fit.basis, id = 'd')
ggplot(subset(Fit.basis.m, variable %in% c('phi.1', 'phi.2')), aes(x = d,
y = value, group = variable, color = variable)) + geom_path()
cd4_cs = cd4[,"9"] %>%
data_frame(cd4_9 = .,
id = 1:366)
cd4_cs %>%
select(cd4_9) %>%
ols_cs()
cd4_cs = cd4[,"9"] %>%
data_frame(cd4_9 = .,
id = 1:366)
cd4_cs %>%
select(cd4_9) %>%
ols_cs()
