select(-id) %>%
as.matrix()
data %>%
mutate(!! col = tfd)
ols_cs_prac = function(formula, col = NULL, data=NULL, Kt=5, basis = "bs", verbose = TRUE){
col = enquo(col)
tfd = data %>%
pull(!! col)
stopifnot((!is.null(tfd))) #needed right?
tfd = tfd %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix()
data %>%
mutate(!!col = tfd)
ols_cs_prac = function(formula, col = NULL, data=NULL, Kt=5, basis = "bs", verbose = TRUE){
col = enquo(col)
tfd = data %>%
pull(!! col)
stopifnot((!is.null(tfd))) #needed right?
tfd = tfd %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix()
data %>%
mutate(!!col := tfd)
}
ols_cs_prac(cca ~ pasat, col = cca, data = dti, Kt = 10)
?? DTI
cca = dti$cca %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix()
dti %>%
mutate(cca = cca)
dti$cca %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix() %>%
mutate(dti, cca = .)
dti$cca %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix()
data(cd4)
# CD4 cell counts for 366 subjects between months -18 and 42 since seroconversion. Each subject's observations are contained in a single row.
# subject * weeks
cd4_tfd = cd4 %>%
tfd()
cd4_df = data_frame(cd4_tfd, id = 1:366) %>%
select(cd4 = cd4_tfd, everything())
fit.cd4 = cd4_df %>%
fpca.tfd(data =., col = cd4)
fit.mu = data.frame(mu = fit.cd4$mu,
n = 1:ncol(fit.cd4$Yhat))
fit.basis = data.frame(phi = fit.cd4$efunctions, #the FPC basis functions.
n = 1:ncol(fit.cd4$Yhat))
## plot estimated mean function
ggplot(fit.mu, aes(x = n, y = mu)) + geom_path()
dti$cca %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix() %>%
mutate(dti, cca = .)
dti$cca %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix()
dti$cca %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix() %>%
dim()
dti$cca %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix() %>%
dim()
dti$cca %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix() %>%
dim() %>%
mutate(dti, cca = .)
dti$cca %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix() %>%
mutate(dti, cca = .)
dti$cca %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix() %>%
dim()
dti$cca %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix() %>%
View()
DTI$cca %>%
dim()
dti$cca %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix() %>%
nrow()
dt = dti
dt["cca"] = dti$cca %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix()
dti %>%
mutate(cca = c)
dti %>%
mutate(cca = dti)
class(cca)
dti %>%
mutate(cca = dti)
dti %>%
mutate(cca = c)
dti %>%
mutate(cca = cca/2)
c = dti$cca %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix()
dti %>%
mutate(cca = c)
ols_cs_prac = function(formula, col = NULL, data=NULL, Kt=5, basis = "bs", verbose = TRUE){
col = enquo(col)
tfd = data %>%
pull(!! col)
stopifnot((!is.null(tfd))) #needed right?
tfd = tfd %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix()
(!! col) %>%
data$. = tfd
}
ols_cs_prac(cca ~ pasat, col = cca, data = dti, Kt = 10)
ols_cs_prac = function(formula, col = NULL, data=NULL, Kt=5, basis = "bs", verbose = TRUE){
col = enquo(col)
tfd = data %>%
pull(!! col)
stopifnot((!is.null(tfd))) #needed right?
tfd = tfd %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix()
(!! col) %>%
data$. = tfd
}
ols_cs_prac = function(formula, col = NULL, data=NULL, Kt=5, basis = "bs", verbose = TRUE){
col = enquo(col)
tfd = data %>%
pull(!! col)
stopifnot((!is.null(tfd))) #needed right?
tfd = tfd %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix()
(!! col) %>%
data$.
}
ols_cs_prac(cca ~ pasat, col = cca, data = dti, Kt = 10)
dti$cca %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix() %>%
mutate(dti, cca = .)
dti %>%
mutate(cca = cca %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix() )
dti %>%
mutate(cca = dti$cca %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix())
transform(dt, c)
c = dti$cca %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix()
dt = dti
transform(dt, c)
c = dti$cca %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix()
dt = dti
transform(dt, c)
? transform
transform(dt, c)
dt = transform(dt, c)
dt == dti
dt$cca = c
dt
c = dti$cca %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix()
dt = dti
dt["cca"] = c
dt
dt[cca] = c
str(cca)
str(d)
str(1)
paste0('"', v, '"')
v = c("lemon", "orange", "apple")
paste0('"', v, '"')
cat(v)
as.character(1)
as.character(d)
as.character("d")
ols_cs_prac = function(formula, col = NULL, data=NULL, Kt=5, basis = "bs", verbose = TRUE){
col = enquo(col)
tfd = data %>%
pull(!! col)
stopifnot((!is.null(tfd))) #needed right?
tfd = tfd %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix()
as.character(col)
}
ols_cs_prac(cca ~ pasat, col = cca, data = dti, Kt = 10)
ols_cs_prac = function(formula, col = NULL, data=NULL, Kt=5, basis = "bs", verbose = TRUE){
col = enquo(col)
tfd = data %>%
pull(!! col)
stopifnot((!is.null(tfd))) #needed right?
tfd = tfd %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix()
as.character(col)[2]
}
ols_cs_prac(cca ~ pasat, col = cca, data = dti, Kt = 10)
ols_cs_prac = function(formula, col = NULL, data=NULL, Kt=5, basis = "bs", verbose = TRUE){
col = enquo(col)
tfd = data %>%
pull(!! col)
stopifnot((!is.null(tfd))) #needed right?
tfd = tfd %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix()
as.character(col)[2] %>%
data[.]
}
ols_cs_prac(cca ~ pasat, col = cca, data = dti, Kt = 10)
ols_cs_prac = function(formula, col = NULL, data=NULL, Kt=5, basis = "bs", verbose = TRUE){
col = enquo(col)
tfd = data %>%
pull(!! col)
stopifnot((!is.null(tfd))) #needed right?
tfd = tfd %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix()
as.character(col)[2] %>%
data[.] = tfd
data
}
ols_cs_prac(cca ~ pasat, col = cca, data = dti, Kt = 10)
ols_cs_prac = function(formula, col = NULL, data=NULL, Kt=5, basis = "bs", verbose = TRUE){
col = enquo(col)
tfd = data %>%
pull(!! col)
stopifnot((!is.null(tfd))) #needed right?
tfd = tfd %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix()
data[as.character(col)[2]]= tfd
data
}
ols_cs_prac(cca ~ pasat, col = cca, data = dti, Kt = 10)
ols_cs_prac = function(formula, col = NULL, data=NULL, Kt=5, basis = "bs", verbose = TRUE){
col = enquo(col)
tfd = data %>%
pull(!! col)
stopifnot((!is.null(tfd))) #needed right?
tfd = tfd %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix()
data = data[as.character(col)[2]]= tfd
data
}
ols_cs_prac(cca ~ pasat, col = cca, data = dti, Kt = 10)
ols_cs_prac = function(formula, col = NULL, data=NULL, Kt=5, basis = "bs", verbose = TRUE){
col = enquo(col)
tfd = data %>%
pull(!! col)
stopifnot((!is.null(tfd))) #needed right?
tfd = tfd %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix()
data[as.character(col)[2]]= tfd
call <- match.call()
tf <- terms.formula(formula, specials = "re")
trmstrings <- attr(tf, "term.labels")
specials <- attr(tf, "specials")
where.re <-specials$re - 1
if (length(where.re) != 0) {
mf_fixed <- model.frame(tf[-where.re], data = data)
formula = tf[-where.re]
responsename <- attr(tf, "variables")[2][[1]]
###
REs = list(NA, NA)
REs[[1]] = names(eval(parse(text=attr(tf[where.re], "term.labels")), envir=data)$data)
REs[[2]]=paste0("(1|",REs[[1]],")")
###
formula2 <- paste(responsename, "~", REs[[1]], sep = "")
newfrml <- paste(responsename, "~", REs[[2]], sep = "")
newtrmstrings <- attr(tf[-where.re], "term.labels")
formula2 <- formula(paste(c(formula2, newtrmstrings),
collapse = "+"))
newfrml <- formula(paste(c(newfrml, newtrmstrings), collapse = "+"))
mf <- model.frame(formula2, data = data)
if (length(data) == 0) {
Z = lme4::mkReTrms(lme4::findbars(newfrml), fr = mf)$Zt
}
else {
Z = lme4::mkReTrms(lme4::findbars(newfrml), fr = data)$Zt
}
}
else {
mf_fixed <- model.frame(tf, data = data)
}
mt_fixed <- attr(mf_fixed, "terms")
# get response (Y)
Y <- model.response(mf_fixed, "numeric")
# x is a matrix of fixed effects
# automatically adds in intercept
X <- model.matrix(mt_fixed, mf_fixed, contrasts)
### model organization ###
D = dim(Y)[2]
I = dim(X)[1]
p = dim(X)[2]
if(basis == "bs"){
Theta = bs(1:D, df = Kt, intercept=TRUE, degree=3)
} else if(basis == "pbs"){
Theta = pbs(1:D, df = Kt, intercept=TRUE, degree=3)
}
X.des = X
Y.vec = as.vector(t(Y))
X = kronecker(X.des, Theta)
n.coef = dim(X.des)[2]
## OLS model fitting and processing results
if(verbose) { cat("Using OLS to estimate model parameters \n") }
model.ols = lm(Y.vec ~ -1 + X)
Bx.ols = matrix(model.ols$coef, nrow = Kt, ncol = n.coef)
beta.hat.ols = t(Bx.ols) %*% t(Theta)
resid.mat = matrix(resid(model.ols), I, D, byrow = TRUE)
## Get Residual Structure using FPCA
## note: this is commented out because, in simulations based on the headstart data,
## using FPCA lead to higher-than-nominal sizes for tests of nested models.
## using the raw covariance worked better. using FPCA is possible, but relies
## on some case-specific choices.
# raw.resid.cov = cov(resid.mat)
# fpca.resid = fpca.sc(resid.mat, pve = .9995, nbasis = 20)
# resid.cov = with(fpca.resid, efunctions %*% diag(evalues) %*% t(efunctions))
## account for (possibly non-constant) ME nugget effect
# sm.diag = Theta %*% solve(crossprod(Theta)) %*% t(Theta) %*% (diag(raw.resid.cov) - diag(resid.cov))
# if(sum( sm.diag < 0 ) >0) { sm.diag[ sm.diag < 0] = min((diag(raw.resid.cov) - diag(resid.cov))[ sm.diag < 0])}
# diag(resid.cov) = diag(resid.cov) + sm.diag
sigma = cov(resid.mat) * (I - 1) / (I - p)
## get confidence intervals
beta.UB = beta.LB = matrix(NA, p, D)
for(p.cur in 1:p){
## confidence intervals for this model shouldn't be trusted
}
Yhat = X.des %*% beta.hat.ols
ret = list(beta.hat.ols, beta.UB, beta.LB, Yhat, mt_fixed, data, model.ols, sigma)
names(ret) = c("beta.hat", "beta.UB", "beta.LB", "Yhat", "terms", "data", "model.ols", "sigma")
class(ret) = "fosr"
ret
}
ols_cs_prac(cca ~ pasat, col = cca, data = dti, Kt = 10)
View(DTI)
data(DTI)
View(DTI)
with(refund::DTI,
data.frame(id = ID, sex = sex,
case = factor(ifelse(case, "MS", "control")))) %>% as.tbl %>%
mutate(cca = tfd(DTI$cca, seq(0,1, l = 93), signif = 2) %>%
tfd(arg = seq(0,1,l = 93)),
rcst = tfd(DTI$rcst, seq(0, 1, l = 55), signif = 3))
dti["pasat"] = DTI$pasat
ols_cs_prac(cca ~ pasat, col = cca, data = dti, Kt = 10)
dti.ols == dti.ols.prac
dti.ols.prac = ols_cs_prac(cca ~ pasat, col = cca, data = dti, Kt = 10)
dti.ols == dti.ols.prac
Fit.MM = fpca.sc(cd4, var = TRUE, simul = TRUE)
models = c("dti.ols", "dti.ols.prac")
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
plot.dat = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw()
## plot results
models = c("dti.ols", "dti.ols.prac")
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
plot.dat = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw()
plot.dat = melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw()
dti.ols = ols_cs(cca ~ pasat, data = DTI, Kt = 10)
dti["pasat"] = DTI$pasat
dti.ols.prac = ols_cs_prac(cca ~ pasat, col = cca, data = dti, Kt = 10)
## plot results
models = c("dti.ols", "dti.ols.prac")
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
plot.dat = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw()
plot.dat = melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw()
dti.ols$beta.hat[1,] == dti.ols.prac$beta.hat[1,]
dti[cca]
dti$cca
DTI$cca
dt$c
c = dti$cca %>%
as.data.frame() %>%
spread(key = arg, value = value) %>%
select(-id) %>%
as.matrix()
dt = dti
dt["cca"] = c
as.character("d")
dt$cca
DTI$cca
View(dt$cca)
View(DTI$cca)
models = c("dti.ols", "dti.ols.prac")
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
plot.dat = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw()
plot.dat = melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw()
dt$cca == DTI$cca
dt$pasat == DTI$pasat
View(dt$pasat)
View(DTI$pasat)
dti["pasat"] = DTI$pasat
dti.ols.prac = ols_cs_prac(cca ~ pasat, col = cca, data = dti, Kt = 10)
## plot results
models = c("dti.ols", "dti.ols.prac")
intercepts = sapply(models, function(u) get(u)$beta.hat[1,])
slopes = sapply(models, function(u) get(u)$beta.hat[2,])
plot.dat = melt(intercepts); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw()
plot.dat = melt(slopes); colnames(plot.dat) = c("grid", "method", "value")
ggplot(plot.dat, aes(x = grid, y = value, group = method, color = method)) +
geom_path() + theme_bw()
dt$cca == DTI$cca
dt$pasat == DTI$pasat
all(dt$cca == DTI$cca)
all(dt$cca == DTI$cca, na.rm = True)
all(dt$cca == DTI$cca, na.rm = TRUE)
all(dt$pasat == DTI$pasat, na.rm = TRUE)
all(dt$cca == DTI$cca, na.rm = TRUE)
all(dt$pasat == DTI$pasat, na.rm = TRUE)
